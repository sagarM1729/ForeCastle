// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// üîë 1. users - Stores wallet addresses
model User {
  id             String   @id @default(cuid())
  wallet_address String   @unique
  created_at     DateTime @default(now())
  
  // Relations
  createdMarkets Market[] @relation("MarketCreator")
  trades         Trade[]
  resolutions    Resolution[]
  
  @@map("users")
}

// üìà 2. markets - Market questions & metadata  
model Market {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  status      String   @default("ACTIVE") // ACTIVE, CLOSED, RESOLVED
  created_by  String
  created_at  DateTime @default(now())
  
  // Relations
  creator     User       @relation("MarketCreator", fields: [created_by], references: [id])
  options     Option[]
  trades      Trade[]
  resolution  Resolution?
  
  @@map("markets")
}

// ‚úÖ 3. options - Market outcomes (like YES / NO)
model Option {
  id           String  @id @default(cuid())
  market_id    String
  label        String  // "YES", "NO", or custom options
  current_odds Decimal @default(0.5)
  
  // Relations
  market Market @relation(fields: [market_id], references: [id], onDelete: Cascade)
  trades Trade[]
  winningResolutions Resolution[]
  
  @@map("options")
}

// üí∞ 4. trades - User bets/trades per market
model Trade {
  id        String   @id @default(cuid())
  user_id   String
  market_id String
  option_id String
  amount    Decimal
  price     Decimal
  tx_hash   String?
  created_at DateTime @default(now())
  
  // Relations
  user   User   @relation(fields: [user_id], references: [id])
  market Market @relation(fields: [market_id], references: [id])
  option Option @relation(fields: [option_id], references: [id])
  
  @@map("trades")
}

// üèÅ 5. resolutions - Admin or oracle result of market
model Resolution {
  id                String   @id @default(cuid())
  market_id         String   @unique
  winning_option_id String
  resolved_by       String
  resolved_at       DateTime @default(now())
  
  // Relations
  market         Market @relation(fields: [market_id], references: [id], onDelete: Cascade)
  winning_option Option @relation(fields: [winning_option_id], references: [id])
  resolver       User   @relation(fields: [resolved_by], references: [id])
  
  @@map("resolutions")
}
