const { PrismaClient } = require('@prisma/client')

const db = new PrismaClient()

async function printMarkets() {
  try {
    console.log('üìä Fetching all markets from AWS PostgreSQL...\n')

    const markets = await db.market.findMany({
      include: {
        creator: {
          select: {
            id: true,
            wallet_address: true
          }
        },
        options: {
          select: {
            id: true,
            label: true,
            current_odds: true
          }
        },
        trades: {
          select: {
            id: true,
            amount: true,
            price: true,
            created_at: true,
            user: {
              select: {
                wallet_address: true
              }
            }
          }
        },
        resolution: {
          select: {
            winning_option_id: true,
            resolved_at: true,
            resolver: {
              select: {
                wallet_address: true
              }
            }
          }
        },
        _count: {
          select: {
            trades: true,
            options: true
          }
        }
      },
      orderBy: {
        created_at: 'desc'
      }
    })

    if (markets.length === 0) {
      console.log('üà≥ No markets found in the database')
      console.log('üí° Run: node scripts/seed-sample-data.js to create sample markets')
      return
    }

    console.log(`üéØ Found ${markets.length} market(s) in AWS PostgreSQL:\n`)

    markets.forEach((market, index) => {
      console.log(`‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`)
      console.log(`üèõÔ∏è  MARKET #${index + 1} (ID: ${market.id})`)
      console.log(`‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`)
      console.log(`üìù Title: ${market.title}`)
      console.log(`üìÑ Description: ${market.description}`)
      console.log(`üè∑Ô∏è  Category: ${market.category}`)
      console.log(`üìä Status: ${market.status}`)
      console.log(`üìÖ Created: ${market.created_at}`)
      console.log(`üë§ Creator: ${market.creator.wallet_address}`)
      
      console.log(`\nüìã OPTIONS (${market.options.length}):`)
      market.options.forEach(option => {
        console.log(`   ‚Ä¢ ${option.label}: ${(option.current_odds * 100).toFixed(1)}% odds`)
      })

      console.log(`\nüí∞ TRADES (${market.trades.length}):`)
      if (market.trades.length === 0) {
        console.log(`   üì≠ No trades yet`)
      } else {
        market.trades.forEach(trade => {
          const trader = trade.user.wallet_address.slice(0, 6) + '...' + trade.user.wallet_address.slice(-4)
          console.log(`   ‚Ä¢ ${trader} traded $${trade.amount} at ${(trade.price * 100).toFixed(1)}% (${trade.created_at})`)
        })
      }

      if (market.resolution) {
        console.log(`\n‚úÖ RESOLUTION:`)
        console.log(`   ‚Ä¢ Resolved at: ${market.resolution.resolved_at}`)
        console.log(`   ‚Ä¢ Winning option ID: ${market.resolution.winning_option_id}`)
        console.log(`   ‚Ä¢ Resolver: ${market.resolution.resolver.wallet_address}`)
      } else {
        console.log(`\n‚è≥ Status: UNRESOLVED`)
      }

      console.log(`\nüìà STATS:`)
      console.log(`   ‚Ä¢ Total trades: ${market._count.trades}`)
      console.log(`   ‚Ä¢ Total options: ${market._count.options}`)
      
      console.log(`\n`)
    })

    // Summary stats
    const activeMarkets = markets.filter(m => m.status === 'ACTIVE').length
    const resolvedMarkets = markets.filter(m => m.status === 'RESOLVED').length
    const totalTrades = markets.reduce((sum, m) => sum + m._count.trades, 0)

    console.log(`üìä DATABASE SUMMARY:`)
    console.log(`   üü¢ Active Markets: ${activeMarkets}`)
    console.log(`   ‚úÖ Resolved Markets: ${resolvedMarkets}`)
    console.log(`   üí∞ Total Trades: ${totalTrades}`)
    console.log(`   üë• Unique Creators: ${new Set(markets.map(m => m.creator.wallet_address)).size}`)

  } catch (error) {
    console.error('‚ùå Error fetching markets:', error)
  } finally {
    await db.$disconnect()
  }
}

printMarkets()
